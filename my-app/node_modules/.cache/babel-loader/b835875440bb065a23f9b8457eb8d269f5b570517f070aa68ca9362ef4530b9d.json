{"ast":null,"code":"// // import React, { useState } from 'react';\n// // import './PatientManagement.css'; // Import CSS file\n// // function PatientManagement() {\n// //   // State to manage patients\n// //   const [patients, setPatients] = useState([]);\n// //   // State to track the index of the patient being edited\n// //   const [editIndex, setEditIndex] = useState(null);\n// //   // State to track patient details for editing\n// //   const [editedPatient, setEditedPatient] = useState({\n// //     name: '',\n// //     age: '',\n// //     gender: '',\n// //     appointment: '',\n// //     phone: '',\n// //     disease: '',\n// //     doctorName: '',\n// //     address: '',\n// //     status: ''\n// //   });\n// //   // Function to add a new patient\n// //   const addPatient = (patient) => {\n// //     setPatients([...patients, patient]);\n// //   };\n// //   // Function to delete a patient\n// //   const deletePatient = (index) => {\n// //     const updatedPatients = [...patients];\n// //     updatedPatients.splice(index, 1);\n// //     setPatients(updatedPatients);\n// //   };\n// //   // Function to edit a patient\n// //   const editPatient = (index) => {\n// //     setEditIndex(index);\n// //     setEditedPatient(patients[index]);\n// //   };\n// //   // Function to update a patient\n// //   const updatePatient = (index, updatedPatient) => {\n// //     const updatedPatients = [...patients];\n// //     updatedPatients[index] = updatedPatient;\n// //     setPatients(updatedPatients);\n// //     setEditIndex(null);\n// //     setEditedPatient({\n// //       name: '',\n// //       age: '',\n// //       gender: '',\n// //       appointment: '',\n// //       phone: '',\n// //       disease: '',\n// //       doctorName: '',\n// //       address: '',\n// //       status: ''\n// //     });\n// //   };\n// //   return (\n// //     <div className=\"patient-management\">\n// //       <h2>Patient Management</h2>\n// //       {/* Form to add or edit patient */}\n// //       <form onSubmit={(e) => {\n// //         e.preventDefault();\n// //         if (editIndex !== null) {\n// //           updatePatient(editIndex, editedPatient);\n// //         } else {\n// //           addPatient(editedPatient);\n// //         }\n// //       }}>\n// //         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedPatient.name} onChange={(e) => setEditedPatient({...editedPatient, name: e.target.value})} />\n// //         <input type=\"number\" name=\"age\" placeholder=\"Age\" required value={editedPatient.age} onChange={(e) => setEditedPatient({...editedPatient, age: e.target.value})} />\n// //         <select name=\"gender\" required value={editedPatient.gender} onChange={(e) => setEditedPatient({...editedPatient, gender: e.target.value})}>\n// //           <option value=\"\">Select Gender</option>\n// //           <option value=\"Male\">Male</option>\n// //           <option value=\"Female\">Female</option>\n// //           <option value=\"Other\">Other</option>\n// //         </select>\n// //         <input type=\"date\" name=\"appointment\" placeholder=\"Appointment Date\" required value={editedPatient.appointment} onChange={(e) => setEditedPatient({...editedPatient, appointment: e.target.value})} />\n// //         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedPatient.phone} onChange={(e) => setEditedPatient({...editedPatient, phone: e.target.value})} />\n// //         <input type=\"text\" name=\"disease\" placeholder=\"Disease\" required value={editedPatient.disease} onChange={(e) => setEditedPatient({...editedPatient, disease: e.target.value})} />\n// //         <input type=\"text\" name=\"doctorName\" placeholder=\"Doctor Name\" required value={editedPatient.doctorName} onChange={(e) => setEditedPatient({...editedPatient, doctorName: e.target.value})} />\n// //         <input type=\"text\" name=\"address\" placeholder=\"Address\" required value={editedPatient.address} onChange={(e) => setEditedPatient({...editedPatient, address: e.target.value})} />\n// //         <select name=\"status\" required value={editedPatient.status} onChange={(e) => setEditedPatient({...editedPatient, status: e.target.value})}>\n// //           <option value=\"\">Select Status</option>\n// //           <option value=\"Active\">Active</option>\n// //           <option value=\"Inactive\">Inactive</option>\n// //           <option value=\"Pending\">Pending</option>\n// //         </select>\n// //         <button type=\"submit\">{editIndex !== null ? 'Update' : 'Add'} Patient</button>\n// //       </form>\n// //       {/* List of patients */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Name</th>\n// //             <th>Age</th>\n// //             <th>Gender</th>\n// //             <th>Appointment</th>\n// //             <th>Phone</th>\n// //             <th>Disease</th>\n// //             <th>Doctor Name</th>\n// //             <th>Address</th>\n// //             <th>Status</th>\n// //             <th>Action</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {patients.map((patient, index) => (\n// //             <tr key={index}>\n// //               <td>{patient.name}</td>\n// //               <td>{patient.age}</td>\n// //               <td>{patient.gender}</td>\n// //               <td>{patient.appointment}</td>\n// //               <td>{patient.phone}</td>\n// //               <td>{patient.disease}</td>\n// //               <td>{patient.doctorName}</td>\n// //               <td>{patient.address}</td>\n// //               <td>{patient.status}</td>\n// //               <td>\n// //                 <button onClick={() => deletePatient(index)}>Delete</button>\n// //                 <button onClick={() => editPatient(index)}>Edit</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // }\n// // export default PatientManagement;\n// import React, { useState, useEffect } from 'react';\n// import './PatientManagement.css';\n// import axios from 'axios';\n// function PatientManagement() {\n//   const [patients, setPatients] = useState([]);\n//   const [editedPatient, setEditedPatient] = useState({\n//     name: '',\n//     age: '',\n//     gender: '',\n//     appointment: '',\n//     phone: '',\n//     disease: '',\n//     doctorName: '',\n//     address: '',\n//     status: ''\n//   });\n//   useEffect(() => {\n//     fetchPatients();\n//   }, []);\n//   const fetchPatients = async () => {\n//     try {\n//       const response = await axios.get('/api/patients');\n//       setPatients(response.data);\n//     } catch (error) {\n//       console.error('Error fetching patients:', error);\n//     }\n//   };\n//   const addPatient = async () => {\n//     try {\n//       const response = await axios.post('/api/patients', editedPatient);\n//       setPatients([...patients, response.data]);\n//       setEditedPatient({\n//         name: '',\n//         age: '',\n//         gender: '',\n//         appointment: '',\n//         phone: '',\n//         disease: '',\n//         doctorName: '',\n//         address: '',\n//         status: ''\n//       });\n//     } catch (error) {\n//       console.error('Error adding patient:', error);\n//     }\n//   };\n//   const handleChange = (e) => {\n//     setEditedPatient({ ...editedPatient, [e.target.name]: e.target.value });\n//   };\n//   return (\n//     <div className=\"patient-management\">\n//       <h2>Patient Management</h2>\n//       <form onSubmit={(e) => {\n//         e.preventDefault();\n//         addPatient();\n//       }}>\n//         {/* Input fields */}\n//         <button type=\"submit\">Add Patient</button>\n//       </form>\n//       <table>\n//         <thead>\n//           <tr>\n//             {/* Table headers */}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {patients.map((patient, index) => (\n//             <tr key={index}>\n//               {/* Table data */}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n// export default PatientManagement;\nimport React,{useState,useEffect}from'react';import'./PatientManagement.css';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function PatientManagement(){const[patients,setPatients]=useState([]);const[editedPatient,setEditedPatient]=useState({name:'',age:'',gender:'',appointment:'',phone:'',disease:'',doctorName:'',address:'',status:''});const fetchPatients=async()=>{try{const response=await axios.get('http://localhost:5000/api/patients');setPatients(response.data);}catch(error){console.error('Error fetching patients:',error);}};useEffect(()=>{fetchPatients();},[]);// Dependency array is empty because fetchPatients doesn't have any dependencies\nconst addPatient=async()=>{try{const response=await axios.post('http://localhost:5000/api/patients',editedPatient);setPatients([...patients,response.data]);setEditedPatient({name:'',age:'',gender:'',appointment:'',phone:'',disease:'',doctorName:'',address:'',status:''});}catch(error){console.error('Error adding patient:',error);}};const handleChange=e=>{setEditedPatient({...editedPatient,[e.target.name]:e.target.value});};return/*#__PURE__*/_jsxs(\"div\",{className:\"patient-management\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Patient Management\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>{e.preventDefault();addPatient();},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",placeholder:\"Name\",required:true,value:editedPatient.name,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"age\",placeholder:\"Age\",required:true,value:editedPatient.age,onChange:handleChange}),/*#__PURE__*/_jsxs(\"select\",{name:\"gender\",required:true,value:editedPatient.gender,onChange:handleChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Gender\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Male\",children:\"Male\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Female\",children:\"Female\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Other\",children:\"Other\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",name:\"appointment\",placeholder:\"Appointment Date\",required:true,value:editedPatient.appointment,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"tel\",name:\"phone\",placeholder:\"Phone\",required:true,value:editedPatient.phone,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"disease\",placeholder:\"Disease\",required:true,value:editedPatient.disease,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"doctorName\",placeholder:\"Doctor Name\",required:true,value:editedPatient.doctorName,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"address\",placeholder:\"Address\",required:true,value:editedPatient.address,onChange:handleChange}),/*#__PURE__*/_jsxs(\"select\",{name:\"status\",required:true,value:editedPatient.status,onChange:handleChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Status\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Active\",children:\"Active\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Inactive\",children:\"Inactive\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Pending\",children:\"Pending\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add Patient\"})]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Age\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Gender\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Appointment\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Phone\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Disease\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Doctor Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Address\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:patients.map((patient,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:patient.name}),/*#__PURE__*/_jsx(\"td\",{children:patient.age}),/*#__PURE__*/_jsx(\"td\",{children:patient.gender}),/*#__PURE__*/_jsx(\"td\",{children:patient.appointment}),/*#__PURE__*/_jsx(\"td\",{children:patient.phone}),/*#__PURE__*/_jsx(\"td\",{children:patient.disease}),/*#__PURE__*/_jsx(\"td\",{children:patient.doctorName}),/*#__PURE__*/_jsx(\"td\",{children:patient.address}),/*#__PURE__*/_jsx(\"td\",{children:patient.status})]},index))})]})]});}export default PatientManagement;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","PatientManagement","patients","setPatients","editedPatient","setEditedPatient","name","age","gender","appointment","phone","disease","doctorName","address","status","fetchPatients","response","get","data","error","console","addPatient","post","handleChange","e","target","value","className","children","onSubmit","preventDefault","type","placeholder","required","onChange","map","patient","index"],"sources":["C:/Users/sunid/Desktop/cc - Copy/my-app/src/PatientManagement.js"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import './PatientManagement.css'; // Import CSS file\r\n\r\n// // function PatientManagement() {\r\n// //   // State to manage patients\r\n// //   const [patients, setPatients] = useState([]);\r\n// //   // State to track the index of the patient being edited\r\n// //   const [editIndex, setEditIndex] = useState(null);\r\n// //   // State to track patient details for editing\r\n// //   const [editedPatient, setEditedPatient] = useState({\r\n// //     name: '',\r\n// //     age: '',\r\n// //     gender: '',\r\n// //     appointment: '',\r\n// //     phone: '',\r\n// //     disease: '',\r\n// //     doctorName: '',\r\n// //     address: '',\r\n// //     status: ''\r\n// //   });\r\n\r\n// //   // Function to add a new patient\r\n// //   const addPatient = (patient) => {\r\n// //     setPatients([...patients, patient]);\r\n// //   };\r\n\r\n// //   // Function to delete a patient\r\n// //   const deletePatient = (index) => {\r\n// //     const updatedPatients = [...patients];\r\n// //     updatedPatients.splice(index, 1);\r\n// //     setPatients(updatedPatients);\r\n// //   };\r\n\r\n// //   // Function to edit a patient\r\n// //   const editPatient = (index) => {\r\n// //     setEditIndex(index);\r\n// //     setEditedPatient(patients[index]);\r\n// //   };\r\n\r\n// //   // Function to update a patient\r\n// //   const updatePatient = (index, updatedPatient) => {\r\n// //     const updatedPatients = [...patients];\r\n// //     updatedPatients[index] = updatedPatient;\r\n// //     setPatients(updatedPatients);\r\n// //     setEditIndex(null);\r\n// //     setEditedPatient({\r\n// //       name: '',\r\n// //       age: '',\r\n// //       gender: '',\r\n// //       appointment: '',\r\n// //       phone: '',\r\n// //       disease: '',\r\n// //       doctorName: '',\r\n// //       address: '',\r\n// //       status: ''\r\n// //     });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"patient-management\">\r\n// //       <h2>Patient Management</h2>\r\n// //       {/* Form to add or edit patient */}\r\n// //       <form onSubmit={(e) => {\r\n// //         e.preventDefault();\r\n// //         if (editIndex !== null) {\r\n// //           updatePatient(editIndex, editedPatient);\r\n// //         } else {\r\n// //           addPatient(editedPatient);\r\n// //         }\r\n// //       }}>\r\n// //         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedPatient.name} onChange={(e) => setEditedPatient({...editedPatient, name: e.target.value})} />\r\n// //         <input type=\"number\" name=\"age\" placeholder=\"Age\" required value={editedPatient.age} onChange={(e) => setEditedPatient({...editedPatient, age: e.target.value})} />\r\n// //         <select name=\"gender\" required value={editedPatient.gender} onChange={(e) => setEditedPatient({...editedPatient, gender: e.target.value})}>\r\n// //           <option value=\"\">Select Gender</option>\r\n// //           <option value=\"Male\">Male</option>\r\n// //           <option value=\"Female\">Female</option>\r\n// //           <option value=\"Other\">Other</option>\r\n// //         </select>\r\n// //         <input type=\"date\" name=\"appointment\" placeholder=\"Appointment Date\" required value={editedPatient.appointment} onChange={(e) => setEditedPatient({...editedPatient, appointment: e.target.value})} />\r\n// //         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedPatient.phone} onChange={(e) => setEditedPatient({...editedPatient, phone: e.target.value})} />\r\n// //         <input type=\"text\" name=\"disease\" placeholder=\"Disease\" required value={editedPatient.disease} onChange={(e) => setEditedPatient({...editedPatient, disease: e.target.value})} />\r\n// //         <input type=\"text\" name=\"doctorName\" placeholder=\"Doctor Name\" required value={editedPatient.doctorName} onChange={(e) => setEditedPatient({...editedPatient, doctorName: e.target.value})} />\r\n// //         <input type=\"text\" name=\"address\" placeholder=\"Address\" required value={editedPatient.address} onChange={(e) => setEditedPatient({...editedPatient, address: e.target.value})} />\r\n// //         <select name=\"status\" required value={editedPatient.status} onChange={(e) => setEditedPatient({...editedPatient, status: e.target.value})}>\r\n// //           <option value=\"\">Select Status</option>\r\n// //           <option value=\"Active\">Active</option>\r\n// //           <option value=\"Inactive\">Inactive</option>\r\n// //           <option value=\"Pending\">Pending</option>\r\n// //         </select>\r\n// //         <button type=\"submit\">{editIndex !== null ? 'Update' : 'Add'} Patient</button>\r\n// //       </form>\r\n// //       {/* List of patients */}\r\n// //       <table>\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Name</th>\r\n// //             <th>Age</th>\r\n// //             <th>Gender</th>\r\n// //             <th>Appointment</th>\r\n// //             <th>Phone</th>\r\n// //             <th>Disease</th>\r\n// //             <th>Doctor Name</th>\r\n// //             <th>Address</th>\r\n// //             <th>Status</th>\r\n// //             <th>Action</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {patients.map((patient, index) => (\r\n// //             <tr key={index}>\r\n// //               <td>{patient.name}</td>\r\n// //               <td>{patient.age}</td>\r\n// //               <td>{patient.gender}</td>\r\n// //               <td>{patient.appointment}</td>\r\n// //               <td>{patient.phone}</td>\r\n// //               <td>{patient.disease}</td>\r\n// //               <td>{patient.doctorName}</td>\r\n// //               <td>{patient.address}</td>\r\n// //               <td>{patient.status}</td>\r\n// //               <td>\r\n// //                 <button onClick={() => deletePatient(index)}>Delete</button>\r\n// //                 <button onClick={() => editPatient(index)}>Edit</button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default PatientManagement;\r\n// import React, { useState, useEffect } from 'react';\r\n// import './PatientManagement.css';\r\n// import axios from 'axios';\r\n\r\n// function PatientManagement() {\r\n//   const [patients, setPatients] = useState([]);\r\n//   const [editedPatient, setEditedPatient] = useState({\r\n//     name: '',\r\n//     age: '',\r\n//     gender: '',\r\n//     appointment: '',\r\n//     phone: '',\r\n//     disease: '',\r\n//     doctorName: '',\r\n//     address: '',\r\n//     status: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchPatients();\r\n//   }, []);\r\n\r\n//   const fetchPatients = async () => {\r\n//     try {\r\n//       const response = await axios.get('/api/patients');\r\n//       setPatients(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching patients:', error);\r\n//     }\r\n//   };\r\n\r\n//   const addPatient = async () => {\r\n//     try {\r\n//       const response = await axios.post('/api/patients', editedPatient);\r\n//       setPatients([...patients, response.data]);\r\n//       setEditedPatient({\r\n//         name: '',\r\n//         age: '',\r\n//         gender: '',\r\n//         appointment: '',\r\n//         phone: '',\r\n//         disease: '',\r\n//         doctorName: '',\r\n//         address: '',\r\n//         status: ''\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error adding patient:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     setEditedPatient({ ...editedPatient, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"patient-management\">\r\n//       <h2>Patient Management</h2>\r\n//       <form onSubmit={(e) => {\r\n//         e.preventDefault();\r\n//         addPatient();\r\n//       }}>\r\n//         {/* Input fields */}\r\n//         <button type=\"submit\">Add Patient</button>\r\n//       </form>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             {/* Table headers */}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {patients.map((patient, index) => (\r\n//             <tr key={index}>\r\n//               {/* Table data */}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default PatientManagement;\r\nimport React, { useState, useEffect } from 'react';\r\nimport './PatientManagement.css';\r\nimport axios from 'axios';\r\n\r\nfunction PatientManagement() {\r\n  const [patients, setPatients] = useState([]);\r\n  const [editedPatient, setEditedPatient] = useState({\r\n    name: '',\r\n    age: '',\r\n    gender: '',\r\n    appointment: '',\r\n    phone: '',\r\n    disease: '',\r\n    doctorName: '',\r\n    address: '',\r\n    status: ''\r\n  });\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/patients');\r\n      setPatients(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching patients:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPatients();\r\n  }, []); // Dependency array is empty because fetchPatients doesn't have any dependencies\r\n\r\n  const addPatient = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/patients', editedPatient);\r\n      setPatients([...patients, response.data]);\r\n      setEditedPatient({\r\n        name: '',\r\n        age: '',\r\n        gender: '',\r\n        appointment: '',\r\n        phone: '',\r\n        disease: '',\r\n        doctorName: '',\r\n        address: '',\r\n        status: ''\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding patient:', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setEditedPatient({ ...editedPatient, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-management\">\r\n      <h2>Patient Management</h2>\r\n      <form onSubmit={(e) => {\r\n        e.preventDefault();\r\n        addPatient();\r\n      }}>\r\n        <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedPatient.name} onChange={handleChange} />\r\n        <input type=\"number\" name=\"age\" placeholder=\"Age\" required value={editedPatient.age} onChange={handleChange} />\r\n        <select name=\"gender\" required value={editedPatient.gender} onChange={handleChange}>\r\n          <option value=\"\">Select Gender</option>\r\n          <option value=\"Male\">Male</option>\r\n          <option value=\"Female\">Female</option>\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n        <input type=\"date\" name=\"appointment\" placeholder=\"Appointment Date\" required value={editedPatient.appointment} onChange={handleChange} />\r\n        <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedPatient.phone} onChange={handleChange} />\r\n        <input type=\"text\" name=\"disease\" placeholder=\"Disease\" required value={editedPatient.disease} onChange={handleChange} />\r\n        <input type=\"text\" name=\"doctorName\" placeholder=\"Doctor Name\" required value={editedPatient.doctorName} onChange={handleChange} />\r\n        <input type=\"text\" name=\"address\" placeholder=\"Address\" required value={editedPatient.address} onChange={handleChange} />\r\n        <select name=\"status\" required value={editedPatient.status} onChange={handleChange}>\r\n          <option value=\"\">Select Status</option>\r\n          <option value=\"Active\">Active</option>\r\n          <option value=\"Inactive\">Inactive</option>\r\n          <option value=\"Pending\">Pending</option>\r\n        </select>\r\n        <button type=\"submit\">Add Patient</button>\r\n      </form>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Age</th>\r\n            <th>Gender</th>\r\n            <th>Appointment</th>\r\n            <th>Phone</th>\r\n            <th>Disease</th>\r\n            <th>Doctor Name</th>\r\n            <th>Address</th>\r\n            <th>Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {patients.map((patient, index) => (\r\n            <tr key={index}>\r\n              <td>{patient.name}</td>\r\n              <td>{patient.age}</td>\r\n              <td>{patient.gender}</td>\r\n              <td>{patient.appointment}</td>\r\n              <td>{patient.phone}</td>\r\n              <td>{patient.disease}</td>\r\n              <td>{patient.doctorName}</td>\r\n              <td>{patient.address}</td>\r\n              <td>{patient.status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientManagement;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}