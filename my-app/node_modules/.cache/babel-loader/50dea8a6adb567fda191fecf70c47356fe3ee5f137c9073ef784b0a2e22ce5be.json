{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sunid\\\\Desktop\\\\cc - Copy\\\\my-app\\\\src\\\\DoctorManagement.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import './DoctorManagement.css'; // Import CSS file\n\n// // function DoctorManagement() {\n// //   // State to manage doctors\n// //   const [doctors, setDoctors] = useState([]);\n// //   // State to track the index of the doctor being edited\n// //   const [editIndex, setEditIndex] = useState(null);\n// //   // State to track doctor details for editing\n// //   const [editedDoctor, setEditedDoctor] = useState({\n// //     name: '',\n// //     qualification: '',\n// //     dob: '',\n// //     specialization: '',\n// //     email: '',\n// //     phone: ''\n// //   });\n\n// //   // Function to add a new doctor\n// //   const addDoctor = (doctor) => {\n// //     setDoctors([...doctors, doctor]);\n// //   };\n\n// //   // Function to delete a doctor\n// //   const deleteDoctor = (index) => {\n// //     const updatedDoctors = [...doctors];\n// //     updatedDoctors.splice(index, 1);\n// //     setDoctors(updatedDoctors);\n// //   };\n\n// //   // Function to edit a doctor\n// //   const editDoctor = (index) => {\n// //     setEditIndex(index);\n// //     setEditedDoctor(doctors[index]);\n// //   };\n\n// //   // Function to update a doctor\n// //   const updateDoctor = (index, updatedDoctor) => {\n// //     const updatedDoctors = [...doctors];\n// //     updatedDoctors[index] = updatedDoctor;\n// //     setDoctors(updatedDoctors);\n// //     setEditIndex(null);\n// //     setEditedDoctor({\n// //       name: '',\n// //       qualification: '',\n// //       dob: '',\n// //       specialization: '',\n// //       email: '',\n// //       phone: ''\n// //     });\n// //   };\n\n// //   return (\n// //     <div className=\"doctor-management\">\n// //       <h2>Doctor Management</h2>\n// //       {/* Form to add or edit doctor */}\n// //       <form onSubmit={(e) => {\n// //         e.preventDefault();\n// //         if (editIndex !== null) {\n// //           updateDoctor(editIndex, editedDoctor);\n// //         } else {\n// //           addDoctor(editedDoctor);\n// //         }\n// //       }}>\n// //         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={(e) => setEditedDoctor({...editedDoctor, name: e.target.value})} />\n// //         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={(e) => setEditedDoctor({...editedDoctor, qualification: e.target.value})} />\n// //         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={(e) => setEditedDoctor({...editedDoctor, dob: e.target.value})} />\n// //         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={(e) => setEditedDoctor({...editedDoctor, specialization: e.target.value})} />\n// //         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={(e) => setEditedDoctor({...editedDoctor, email: e.target.value})} />\n// //         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={(e) => setEditedDoctor({...editedDoctor, phone: e.target.value})} />\n// //         <button type=\"submit\">{editIndex !== null ? 'Update' : 'Add'} Doctor</button>\n// //       </form>\n// //       {/* List of doctors */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Name</th>\n// //             <th>Qualification</th>\n// //             <th>DOB</th>\n// //             <th>Specialization</th>\n// //             <th>Email</th>\n// //             <th>Phone</th>\n// //             <th>Action</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {doctors.map((doctor, index) => (\n// //             <tr key={index}>\n// //               <td>{doctor.name}</td>\n// //               <td>{doctor.qualification}</td>\n// //               <td>{doctor.dob}</td>\n// //               <td>{doctor.specialization}</td>\n// //               <td>{doctor.email}</td>\n// //               <td>{doctor.phone}</td>\n// //               <td>\n// //                 <button onClick={() => deleteDoctor(index)}>Delete</button>\n// //                 <button onClick={() => editDoctor(index)}>Edit</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // }\n\n// // export default DoctorManagement;\n// import React, { useState, useEffect } from 'react';\n// import './DoctorManagement.css';\n// import axios from 'axios';\n\n// function DoctorManagement() {\n//   const [doctors, setDoctors] = useState([]);\n//   const [editedDoctor, setEditedDoctor] = useState({\n//     name: '',\n//     qualification: '',\n//     dob: '',\n//     specialization: '',\n//     email: '',\n//     phone: ''\n//   });\n\n//   useEffect(() => {\n//     fetchDoctors();\n//   }, []);\n\n//   const fetchDoctors = async () => {\n//     try {\n//       const response = await axios.get('/api/doctors');\n//       setDoctors(response.data);\n//     } catch (error) {\n//       console.error('Error fetching doctors:', error);\n//     }\n//   };\n\n//   const addDoctor = async () => {\n//     try {\n//       const response = await axios.post('/api/doctors', editedDoctor);\n//       setDoctors([...doctors, response.data]);\n//       setEditedDoctor({\n//         name: '',\n//         qualification: '',\n//         dob: '',\n//         specialization: '',\n//         email: '',\n//         phone: ''\n//       });\n//     } catch (error) {\n//       console.error('Error adding doctor:', error);\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     setEditedDoctor({ ...editedDoctor, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div className=\"doctor-management\">\n//       <h2>Doctor Management</h2>\n//       <form onSubmit={(e) => {\n//         e.preventDefault();\n//         addDoctor();\n//       }}>\n//         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={handleChange} />\n//         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={handleChange} />\n//         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={handleChange} />\n//         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={handleChange} />\n//         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={handleChange} />\n//         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={handleChange} />\n//         <button type=\"submit\">Add Doctor</button>\n//       </form>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Qualification</th>\n//             <th>DOB</th>\n//             <th>Specialization</th>\n//             <th>Email</th>\n//             <th>Phone</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {doctors.map((doctor, index) => (\n//             <tr key={index}>\n//               <td>{doctor.name}</td>\n//               <td>{doctor.qualification}</td>\n//               <td>{doctor.dob}</td>\n//               <td>{doctor.specialization}</td>\n//               <td>{doctor.email}</td>\n//               <td>{doctor.phone}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default DoctorManagement;\n// import React, { useState, useEffect } from 'react';\n// import './DoctorManagement.css';\n// import axios from 'axios';\n\n// function DoctorManagement() {\n//   const [doctors, setDoctors] = useState([]);\n//   const [editedDoctor, setEditedDoctor] = useState({\n//     name: '',\n//     qualification: '',\n//     dob: '',\n//     specialization: '',\n//     email: '',\n//     phone: ''\n//   });\n\n//   useEffect(() => {\n//     fetchDoctors();\n//   }, []);\n\n//   const fetchDoctors = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/doctors');\n//       setDoctors(response.data);\n//     } catch (error) {\n//       console.error('Error fetching doctors:', error);\n//     }\n//   };\n\n//   const addDoctor = async (e) => {\n//     try {\n//       e.preventDefault(); // Prevent form submission\n//       const response = await axios.post('http://localhost:5000/api/doctors', editedDoctor);\n//       setDoctors([...doctors, response.data]);\n//       setEditedDoctor({\n//         name: '',\n//         qualification: '',\n//         dob: '',\n//         specialization: '',\n//         email: '',\n//         phone: ''\n//       });\n//     } catch (error) {\n//       console.error('Error adding doctor:', error);\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     setEditedDoctor({ ...editedDoctor, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div className=\"doctor-management\">\n//       <h2>Doctor Management</h2>\n//       <form onSubmit={(e) => addDoctor(e)}>\n//         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={handleChange} />\n//         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={handleChange} />\n//         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={handleChange} />\n//         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={handleChange} />\n//         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={handleChange} />\n//         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={handleChange} />\n//         <button type=\"submit\">Add Doctor</button>\n//       </form>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Qualification</th>\n//             <th>DOB</th>\n//             <th>Specialization</th>\n//             <th>Email</th>\n//             <th>Phone</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {doctors.map((doctor, index) => (\n//             <tr key={index}>\n//               <td>{doctor.name}</td>\n//               <td>{doctor.qualification}</td>\n//               <td>{doctor.dob}</td>\n//               <td>{doctor.specialization}</td>\n//               <td>{doctor.email}</td>\n//               <td>{doctor.phone}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default DoctorManagement;\nimport React, { useState, useEffect } from 'react';\nimport './DoctorManagement.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DoctorManagement() {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [editedDoctor, setEditedDoctor] = useState({\n    name: '',\n    qualification: '',\n    dob: '',\n    specialization: '',\n    email: '',\n    phone: ''\n  });\n  const [editingIndex, setEditingIndex] = useState(null);\n  useEffect(() => {\n    fetchDoctors();\n  }, []);\n  const fetchDoctors = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/doctors');\n      setDoctors(response.data);\n    } catch (error) {\n      console.error('Error fetching doctors:', error);\n    }\n  };\n  const addDoctor = async e => {\n    try {\n      e.preventDefault(); // Prevent form submission\n      const response = await axios.post('http://localhost:5000/api/doctors', editedDoctor);\n      setDoctors([...doctors, response.data]);\n      setEditedDoctor({\n        name: '',\n        qualification: '',\n        dob: '',\n        specialization: '',\n        email: '',\n        phone: ''\n      });\n    } catch (error) {\n      console.error('Error adding doctor:', error);\n    }\n  };\n  const editDoctor = async index => {\n    try {\n      const response = await axios.put(`http://localhost:5000/api/doctors/${doctors[index]._id}`, editedDoctor);\n      const updatedDoctors = [...doctors];\n      updatedDoctors[index] = response.data;\n      setDoctors(updatedDoctors);\n      setEditingIndex(null);\n      setEditedDoctor({\n        name: '',\n        qualification: '',\n        dob: '',\n        specialization: '',\n        email: '',\n        phone: ''\n      });\n    } catch (error) {\n      console.error('Error editing doctor:', error);\n    }\n  };\n  const deleteDoctor = async id => {\n    try {\n      await axios.delete(`http://localhost:5000/api/doctors/${id}`);\n      const filteredDoctors = doctors.filter(doctor => doctor._id !== id);\n      setDoctors(filteredDoctors);\n    } catch (error) {\n      console.error('Error deleting doctor:', error);\n    }\n  };\n  const handleChange = e => {\n    setEditedDoctor({\n      ...editedDoctor,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleEditClick = index => {\n    setEditingIndex(index);\n    setEditedDoctor(doctors[index]);\n  };\n  const handleCancelEdit = () => {\n    setEditingIndex(null);\n    setEditedDoctor({\n      name: '',\n      qualification: '',\n      dob: '',\n      specialization: '',\n      email: '',\n      phone: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-management\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Doctor Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => addDoctor(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Name\",\n        required: true,\n        value: editedDoctor.name,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"qualification\",\n        placeholder: \"Qualification\",\n        required: true,\n        value: editedDoctor.qualification,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"dob\",\n        placeholder: \"Date of Birth\",\n        required: true,\n        value: editedDoctor.dob,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"specialization\",\n        placeholder: \"Specialization\",\n        required: true,\n        value: editedDoctor.specialization,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        required: true,\n        value: editedDoctor.email,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        name: \"phone\",\n        placeholder: \"Phone\",\n        required: true,\n        value: editedDoctor.phone,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), editingIndex !== null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => editDoctor(editingIndex),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleCancelEdit,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Doctor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Qualification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DOB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Specialization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: editedDoctor.name,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 45\n            }, this) : doctor.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"qualification\",\n              value: editedDoctor.qualification,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 45\n            }, this) : doctor.qualification\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"dob\",\n              value: editedDoctor.dob,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 45\n            }, this) : doctor.dob\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"specialization\",\n              value: editedDoctor.specialization,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 45\n            }, this) : doctor.specialization\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              name: \"email\",\n              value: editedDoctor.email,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 45\n            }, this) : doctor.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              name: \"phone\",\n              value: editedDoctor.phone,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 45\n            }, this) : doctor.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingIndex === index ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editDoctor(index),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleCancelEdit,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditClick(index),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteDoctor(doctor._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorManagement, \"Xj1Hb+Z9rPqdb+IXlON3WUfOBEo=\");\n_c = DoctorManagement;\nexport default DoctorManagement;\nvar _c;\n$RefreshReg$(_c, \"DoctorManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorManagement","_s","doctors","setDoctors","editedDoctor","setEditedDoctor","name","qualification","dob","specialization","email","phone","editingIndex","setEditingIndex","fetchDoctors","response","get","data","error","console","addDoctor","e","preventDefault","post","editDoctor","index","put","_id","updatedDoctors","deleteDoctor","id","delete","filteredDoctors","filter","doctor","handleChange","target","value","handleEditClick","handleCancelEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","required","onChange","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/sunid/Desktop/cc - Copy/my-app/src/DoctorManagement.js"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import './DoctorManagement.css'; // Import CSS file\r\n\r\n// // function DoctorManagement() {\r\n// //   // State to manage doctors\r\n// //   const [doctors, setDoctors] = useState([]);\r\n// //   // State to track the index of the doctor being edited\r\n// //   const [editIndex, setEditIndex] = useState(null);\r\n// //   // State to track doctor details for editing\r\n// //   const [editedDoctor, setEditedDoctor] = useState({\r\n// //     name: '',\r\n// //     qualification: '',\r\n// //     dob: '',\r\n// //     specialization: '',\r\n// //     email: '',\r\n// //     phone: ''\r\n// //   });\r\n\r\n// //   // Function to add a new doctor\r\n// //   const addDoctor = (doctor) => {\r\n// //     setDoctors([...doctors, doctor]);\r\n// //   };\r\n\r\n// //   // Function to delete a doctor\r\n// //   const deleteDoctor = (index) => {\r\n// //     const updatedDoctors = [...doctors];\r\n// //     updatedDoctors.splice(index, 1);\r\n// //     setDoctors(updatedDoctors);\r\n// //   };\r\n\r\n// //   // Function to edit a doctor\r\n// //   const editDoctor = (index) => {\r\n// //     setEditIndex(index);\r\n// //     setEditedDoctor(doctors[index]);\r\n// //   };\r\n\r\n// //   // Function to update a doctor\r\n// //   const updateDoctor = (index, updatedDoctor) => {\r\n// //     const updatedDoctors = [...doctors];\r\n// //     updatedDoctors[index] = updatedDoctor;\r\n// //     setDoctors(updatedDoctors);\r\n// //     setEditIndex(null);\r\n// //     setEditedDoctor({\r\n// //       name: '',\r\n// //       qualification: '',\r\n// //       dob: '',\r\n// //       specialization: '',\r\n// //       email: '',\r\n// //       phone: ''\r\n// //     });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"doctor-management\">\r\n// //       <h2>Doctor Management</h2>\r\n// //       {/* Form to add or edit doctor */}\r\n// //       <form onSubmit={(e) => {\r\n// //         e.preventDefault();\r\n// //         if (editIndex !== null) {\r\n// //           updateDoctor(editIndex, editedDoctor);\r\n// //         } else {\r\n// //           addDoctor(editedDoctor);\r\n// //         }\r\n// //       }}>\r\n// //         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={(e) => setEditedDoctor({...editedDoctor, name: e.target.value})} />\r\n// //         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={(e) => setEditedDoctor({...editedDoctor, qualification: e.target.value})} />\r\n// //         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={(e) => setEditedDoctor({...editedDoctor, dob: e.target.value})} />\r\n// //         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={(e) => setEditedDoctor({...editedDoctor, specialization: e.target.value})} />\r\n// //         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={(e) => setEditedDoctor({...editedDoctor, email: e.target.value})} />\r\n// //         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={(e) => setEditedDoctor({...editedDoctor, phone: e.target.value})} />\r\n// //         <button type=\"submit\">{editIndex !== null ? 'Update' : 'Add'} Doctor</button>\r\n// //       </form>\r\n// //       {/* List of doctors */}\r\n// //       <table>\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Name</th>\r\n// //             <th>Qualification</th>\r\n// //             <th>DOB</th>\r\n// //             <th>Specialization</th>\r\n// //             <th>Email</th>\r\n// //             <th>Phone</th>\r\n// //             <th>Action</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {doctors.map((doctor, index) => (\r\n// //             <tr key={index}>\r\n// //               <td>{doctor.name}</td>\r\n// //               <td>{doctor.qualification}</td>\r\n// //               <td>{doctor.dob}</td>\r\n// //               <td>{doctor.specialization}</td>\r\n// //               <td>{doctor.email}</td>\r\n// //               <td>{doctor.phone}</td>\r\n// //               <td>\r\n// //                 <button onClick={() => deleteDoctor(index)}>Delete</button>\r\n// //                 <button onClick={() => editDoctor(index)}>Edit</button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default DoctorManagement;\r\n// import React, { useState, useEffect } from 'react';\r\n// import './DoctorManagement.css';\r\n// import axios from 'axios';\r\n\r\n// function DoctorManagement() {\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [editedDoctor, setEditedDoctor] = useState({\r\n//     name: '',\r\n//     qualification: '',\r\n//     dob: '',\r\n//     specialization: '',\r\n//     email: '',\r\n//     phone: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchDoctors();\r\n//   }, []);\r\n\r\n//   const fetchDoctors = async () => {\r\n//     try {\r\n//       const response = await axios.get('/api/doctors');\r\n//       setDoctors(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching doctors:', error);\r\n//     }\r\n//   };\r\n\r\n//   const addDoctor = async () => {\r\n//     try {\r\n//       const response = await axios.post('/api/doctors', editedDoctor);\r\n//       setDoctors([...doctors, response.data]);\r\n//       setEditedDoctor({\r\n//         name: '',\r\n//         qualification: '',\r\n//         dob: '',\r\n//         specialization: '',\r\n//         email: '',\r\n//         phone: ''\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error adding doctor:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     setEditedDoctor({ ...editedDoctor, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"doctor-management\">\r\n//       <h2>Doctor Management</h2>\r\n//       <form onSubmit={(e) => {\r\n//         e.preventDefault();\r\n//         addDoctor();\r\n//       }}>\r\n//         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={handleChange} />\r\n//         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={handleChange} />\r\n//         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={handleChange} />\r\n//         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={handleChange} />\r\n//         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={handleChange} />\r\n//         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={handleChange} />\r\n//         <button type=\"submit\">Add Doctor</button>\r\n//       </form>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Qualification</th>\r\n//             <th>DOB</th>\r\n//             <th>Specialization</th>\r\n//             <th>Email</th>\r\n//             <th>Phone</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {doctors.map((doctor, index) => (\r\n//             <tr key={index}>\r\n//               <td>{doctor.name}</td>\r\n//               <td>{doctor.qualification}</td>\r\n//               <td>{doctor.dob}</td>\r\n//               <td>{doctor.specialization}</td>\r\n//               <td>{doctor.email}</td>\r\n//               <td>{doctor.phone}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default DoctorManagement;\r\n// import React, { useState, useEffect } from 'react';\r\n// import './DoctorManagement.css';\r\n// import axios from 'axios';\r\n\r\n// function DoctorManagement() {\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [editedDoctor, setEditedDoctor] = useState({\r\n//     name: '',\r\n//     qualification: '',\r\n//     dob: '',\r\n//     specialization: '',\r\n//     email: '',\r\n//     phone: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchDoctors();\r\n//   }, []);\r\n\r\n//   const fetchDoctors = async () => {\r\n//     try {\r\n//       const response = await axios.get('http://localhost:5000/api/doctors');\r\n//       setDoctors(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching doctors:', error);\r\n//     }\r\n//   };\r\n\r\n//   const addDoctor = async (e) => {\r\n//     try {\r\n//       e.preventDefault(); // Prevent form submission\r\n//       const response = await axios.post('http://localhost:5000/api/doctors', editedDoctor);\r\n//       setDoctors([...doctors, response.data]);\r\n//       setEditedDoctor({\r\n//         name: '',\r\n//         qualification: '',\r\n//         dob: '',\r\n//         specialization: '',\r\n//         email: '',\r\n//         phone: ''\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error adding doctor:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     setEditedDoctor({ ...editedDoctor, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"doctor-management\">\r\n//       <h2>Doctor Management</h2>\r\n//       <form onSubmit={(e) => addDoctor(e)}>\r\n//         <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={handleChange} />\r\n//         <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={handleChange} />\r\n//         <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={handleChange} />\r\n//         <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={handleChange} />\r\n//         <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={handleChange} />\r\n//         <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={handleChange} />\r\n//         <button type=\"submit\">Add Doctor</button>\r\n//       </form>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Qualification</th>\r\n//             <th>DOB</th>\r\n//             <th>Specialization</th>\r\n//             <th>Email</th>\r\n//             <th>Phone</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {doctors.map((doctor, index) => (\r\n//             <tr key={index}>\r\n//               <td>{doctor.name}</td>\r\n//               <td>{doctor.qualification}</td>\r\n//               <td>{doctor.dob}</td>\r\n//               <td>{doctor.specialization}</td>\r\n//               <td>{doctor.email}</td>\r\n//               <td>{doctor.phone}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default DoctorManagement;\r\nimport React, { useState, useEffect } from 'react';\r\nimport './DoctorManagement.css';\r\nimport axios from 'axios';\r\n\r\nfunction DoctorManagement() {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [editedDoctor, setEditedDoctor] = useState({\r\n    name: '',\r\n    qualification: '',\r\n    dob: '',\r\n    specialization: '',\r\n    email: '',\r\n    phone: ''\r\n  });\r\n  const [editingIndex, setEditingIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors();\r\n  }, []);\r\n\r\n  const fetchDoctors = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/doctors');\r\n      setDoctors(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching doctors:', error);\r\n    }\r\n  };\r\n\r\n  const addDoctor = async (e) => {\r\n    try {\r\n      e.preventDefault(); // Prevent form submission\r\n      const response = await axios.post('http://localhost:5000/api/doctors', editedDoctor);\r\n      setDoctors([...doctors, response.data]);\r\n      setEditedDoctor({\r\n        name: '',\r\n        qualification: '',\r\n        dob: '',\r\n        specialization: '',\r\n        email: '',\r\n        phone: ''\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding doctor:', error);\r\n    }\r\n  };\r\n\r\n  const editDoctor = async (index) => {\r\n    try {\r\n      const response = await axios.put(`http://localhost:5000/api/doctors/${doctors[index]._id}`, editedDoctor);\r\n      const updatedDoctors = [...doctors];\r\n      updatedDoctors[index] = response.data;\r\n      setDoctors(updatedDoctors);\r\n      setEditingIndex(null);\r\n      setEditedDoctor({\r\n        name: '',\r\n        qualification: '',\r\n        dob: '',\r\n        specialization: '',\r\n        email: '',\r\n        phone: ''\r\n      });\r\n    } catch (error) {\r\n      console.error('Error editing doctor:', error);\r\n    }\r\n  };\r\n\r\n  const deleteDoctor = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/doctors/${id}`);\r\n      const filteredDoctors = doctors.filter((doctor) => doctor._id !== id);\r\n      setDoctors(filteredDoctors);\r\n    } catch (error) {\r\n      console.error('Error deleting doctor:', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setEditedDoctor({ ...editedDoctor, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleEditClick = (index) => {\r\n    setEditingIndex(index);\r\n    setEditedDoctor(doctors[index]);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingIndex(null);\r\n    setEditedDoctor({\r\n      name: '',\r\n      qualification: '',\r\n      dob: '',\r\n      specialization: '',\r\n      email: '',\r\n      phone: ''\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"doctor-management\">\r\n      <h2>Doctor Management</h2>\r\n      <form onSubmit={(e) => addDoctor(e)}>\r\n        <input type=\"text\" name=\"name\" placeholder=\"Name\" required value={editedDoctor.name} onChange={handleChange} />\r\n        <input type=\"text\" name=\"qualification\" placeholder=\"Qualification\" required value={editedDoctor.qualification} onChange={handleChange} />\r\n        <input type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" required value={editedDoctor.dob} onChange={handleChange} />\r\n        <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" required value={editedDoctor.specialization} onChange={handleChange} />\r\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required value={editedDoctor.email} onChange={handleChange} />\r\n        <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required value={editedDoctor.phone} onChange={handleChange} />\r\n        {editingIndex !== null ? (\r\n          <>\r\n            <button type=\"button\" onClick={() => editDoctor(editingIndex)}>Save</button>\r\n            <button type=\"button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button type=\"submit\">Add Doctor</button>\r\n        )}\r\n      </form>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Qualification</th>\r\n            <th>DOB</th>\r\n            <th>Specialization</th>\r\n            <th>Email</th>\r\n            <th>Phone</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {doctors.map((doctor, index) => (\r\n            <tr key={index}>\r\n              <td>{editingIndex === index ? <input type=\"text\" name=\"name\" value={editedDoctor.name} onChange={handleChange} /> : doctor.name}</td>\r\n              <td>{editingIndex === index ? <input type=\"text\" name=\"qualification\" value={editedDoctor.qualification} onChange={handleChange} /> : doctor.qualification}</td>\r\n              <td>{editingIndex === index ? <input type=\"date\" name=\"dob\" value={editedDoctor.dob} onChange={handleChange} /> : doctor.dob}</td>\r\n              <td>{editingIndex === index ? <input type=\"text\" name=\"specialization\" value={editedDoctor.specialization} onChange={handleChange} /> : doctor.specialization}</td>\r\n              <td>{editingIndex === index ? <input type=\"email\" name=\"email\" value={editedDoctor.email} onChange={handleChange} /> : doctor.email}</td>\r\n              <td>{editingIndex === index ? <input type=\"tel\" name=\"phone\" value={editedDoctor.phone} onChange={handleChange} /> : doctor.phone}</td>\r\n              <td>\r\n                {editingIndex === index ? (\r\n                  <>\r\n                    <button onClick={() => editDoctor(index)}>Save</button>\r\n                    <button onClick={handleCancelEdit}>Cancel</button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <button onClick={() => handleEditClick(index)}>Edit</button>\r\n                    <button onClick={() => deleteDoctor(doctor._id)}>Delete</button>\r\n                  </>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorManagement;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}